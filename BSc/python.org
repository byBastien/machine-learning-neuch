#+TITLE: Useful Python libraries
#+AUTHOR: Christos Dimitrakakis
#+EMAIL:christos.dimitrakakis@unine.ch
#+LaTeX_HEADER: \include{preamble}
#+LaTeX_CLASS_OPTIONS: [10pt]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+TAGS: activity advanced definition exercise homework project example theory code
#+OPTIONS:   H:3
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\tableofcontents[currentsection]\end{frame}}


* Numpy
** Random variables, Means
*** Means using python
**** Calculating the mean of our class data :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
#+BEGIN_SRC python
X.mean() # gives the mean of all the variables through pandas.core.frame.DataFrame
X["Height"].mean()
np.mean(X["Weight"])
#+END_SRC
- The mean here is *fixed* because we calculate it on the same data.
- If we were to *collect new data* then the answer would be different.

**** Calculating the mean of a random variable :B_example:
     :PROPERTIES:
     :BEAMER_env: example
     :END:
#+BEGIN_SRC python
import numpy as np
X = np.random.gamma(170, 1, size=20)
X.mean()
np.mean(X)
#+END_SRC
- The mean is *random*, so we get a different answer everytime.

* Pandas
** Pandas and dataframes
*** Python pandas for data wrangling
**** Reading class data
#+BEGIN_SRC python
import pandas as pd
X = pd.read_excel("data/class.xlsx")
X["First Name"]
#+END_SRC

#+RESULTS:
: None

- Array columns correspond to features
- Columns can be accessed through namesx

**** Summarising class data
#+BEGIN_SRC python :exports code
X.hist()
import matplotlib.pyplot as plt
plt.show()
#+END_SRC

#+RESULTS:

*** Pandas and DataFrames
- Data in pandas is stored in a *DataFrame*
- DataFrame is *not the same* as a numpy array.
**** Core libraries
#+BEGIN_SRC python :exports code
import pandas as pd
import numpy as np
#+END_SRC

**** Series: A sequence of values
     :PROPERTIES:
     :BEAMER_opt:   [shrink=15]
     :END:
#+BEGIN_SRC python :exports code
# From numpy array:
s = pd.Series(np.random.randn(3),  index=["a", "b", "c"])
# From dict:
d = {"a": 1, "b": 0, "c": 2}
s = pd.Series(d)
# accessing elemets
s.iloc[2] #element 2
s.iloc[1:2] #elements 1,2
s.array # gets the array object 
s.to_numpy() # gets the underlying numpy array
#+END_SRC

*** DataFrames


**** Constructing from a numpy array
#+BEGIN_SRC python :exports code
data = np.random.uniform(size = [3,2])
df = pd.DataFrame(data, index=["John", "Ali", "Sumi"],
         columns=["X1", "X2"])
#+END_SRC

**** Constructing from a dictionary
#+BEGIN_SRC python :exports code
d = {  "one": pd.Series([1, 2], index=["a", "b"]),
       "two": pd.Series([1, 2, 3], index=["a", "b", "c"])}
df = pd.DataFrame(d)
#+END_SRC



**** Access
#+BEGIN_SRC python :exports code
X["First Name"] # get a column
X.loc[2] # get a row
X.at[2, "First Name"] # row 2, column 'first name'
X.loc[2].at["First Name"] # row 2, element 'first name' of the series
X.iat[2,0] # row 2, column 0
#+END_SRC

*** Complex frame access

#+BEGIN_SRC python
df = df.drop(df.columns[0], axis=1) # drop the first column
df['Gender'] = df['Gender'].map({'M': 1, 'F': 0}) # map to binary values
df['Gender'] = pd.get_dummies(df, columns=['Gender']) # map to binary vectors

#+END_SRC

*** One variable: expectations and distributions 

    
* scikitlearn

* statsmodels
